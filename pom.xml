<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.6.2</version>
		<relativePath/>
		<!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>demo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>Hello World ByteCode</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>1.8</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<maven.compiler.plugin.version>3.8.1</maven.compiler.plugin.version>
		<proguard.version>7.0.0</proguard.version>
		<proguard.maven.plugin.version>2.3.1</proguard.maven.plugin.version>
		<httpclient.version>4.5.12</httpclient.version>
		<lombok.version>1.18.10</lombok.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- JSON WEB TOKEN -->
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt</artifactId>
			<version>0.9.0</version>
		</dependency>

		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>20160810</version>
		</dependency>

		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.5.12</version>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>${lombok.version}</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>jakarta.xml.bind</groupId>
			<artifactId>jakarta.xml.bind-api</artifactId>
			<version>2.3.2</version>
		</dependency>
		<!-- Runtime, com.sun.xml.bind module -->
		<dependency>
			<groupId>org.glassfish.jaxb</groupId>
			<artifactId>jaxb-runtime</artifactId>
			<version>2.3.2</version>
		</dependency>

	</dependencies>

	<build>
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<plugin>
				<groupId>com.github.wvengen</groupId>
				<artifactId>proguard-maven-plugin</artifactId>
				<version>${proguard.maven.plugin.version}</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>proguard</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<proguardVersion>${proguard.version}</proguardVersion>
					<injar>${project.build.finalName}.jar</injar>
					<outjar>${project.build.finalName}.jar</outjar>
					<obfuscate>true</obfuscate>
					<options>
						<option>-dontshrink</option>
						<option>-dontoptimize</option>
						<!-- This option will replace all strings in reflections method invocations with new class names.
                             For example, invokes Class.forName('className')-->
						<option>-adaptclassstrings</option>
						<!-- This option will save all original annotations and etc. Otherwise all we be removed from files.-->
						<option>-keepattributes
                            Exceptions,
                            InnerClasses,
                            Signature,
                            Deprecated,
                            SourceFile,
                            LineNumberTable,
                            *Annotation*,
                            EnclosingMethod
						</option>
						<!-- <option>-keep class io.jsonwebtoken.** { *; }</option>
						<option>-keepnames class io.jsonwebtoken.* { *; }</option>
						<option>-keepnames interface io.jsonwebtoken.* { *; }</option>
						<option>-keep class org.bouncycastle.** { *; }</option>
						<option>-keepnames class org.bouncycastle.** { *; }</option>
						<option>-dontwarn org.bouncycastle.**</option> -->
						<!-- This option will save all original names in interfaces (without obfuscate).-->
						<!-- <option>-keepnames interface **</option> -->
						<!-- This option will save all original methods parameters in files defined in -keep sections,
                             otherwise all parameter names will be obfuscate.-->
						<!-- <option>-keepparameternames</option> -->
						<!-- This option will save all original class files (without obfuscate) but obfuscate all
                             in domain and service packages.-->
						<option>-keep
                            class com.example.demo.HelloWorldByteCodeApplication {
                                public static void main(java.lang.String[]);
                            }
						</option>
						<!-- <option>-keep
                            class io.jsonwebtoken.** {
  								public protected private *;
							}
						</option> -->
						<!-- This option ignore warnings such as duplicate class definitions and classes in incorrectly
                            named files-->
						<option>-ignorewarnings</option>
						<!-- This option will save all original class files (without obfuscate) in service package-->
						<!-- <option>-keep class com.slm.proguard.example.spring.boot.service { *; }</option>-->
						<!-- This option will save all original interfaces files (without obfuscate) in all packages.-->
						<!-- <option>-keep interface * extends * { *; }</option> -->
						<!-- This option will save all original defined annotations in all classes in all packages.-->
						<option>-keep class com.example.demo.Controller.DemoController</option>
						<option>-keep class com.example.demo.Controller.OtherDemoController</option>
						<option>-keep class com.example.demo.Controller.UserController</option>

						<!-- <option>-keep class com.example.demo.Model.DemoModel</option>
						<option>-keep class com.example.demo.Model.OtherDemoModel</option>
						<option>-keep class com.example.demo.Model.User</option>

						<option>-keep class com.example.demo.Security.JWTAuthorizationFilter</option>

						<option>-keep class com.example.demo.Service.DemoService</option>
						<option>-keep class com.example.demo.Service.OtherDemoService</option>
						<option>-keep class com.example.demo.Service.ServiceImpl.DemoServiceImpl</option>
						<option>-keep class com.example.demo.Service.ServiceImpl.OtherDemoServiceImpl</option> -->

						<!-- <option>-keep class com.example.demo.Service.DemoService</option>
						<option>-keep class com.example.demo.Service.ServiceImpl.DemoServiceImpl</option> -->

						<!-- <option>-keepclassmembers class * {
                                @org.springframework.context.annotation.GetMapping *;
                                @org.springframework.beans.factory.annotation.RestController *;
                            }
						</option> -->
					</options>
					<injarNotExistsSkip>true</injarNotExistsSkip>
					<libs>
						<!--Put here your libraries if required-->
						<!--<lib>${java.home}/lib/rt.jar</lib>-->
					</libs>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>com.guardsquare</groupId>
						<artifactId>proguard-base</artifactId>
						<version>${proguard.version}</version>
					</dependency>
				</dependencies>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven.compiler.plugin.version}</version>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>

			<!-- Maven assembly must be run after proguard obfuscation so it take already obfuscated files.-->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
						<configuration>
							<mainClass>com.example.demo.HelloWorldByteCodeApplication</mainClass>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
